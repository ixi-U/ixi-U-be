plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.12'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'jacoco'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springAiVersion', "1.0.0")
    // Rest Docs
    snippetsDir = file('build/generated-snippets')
}

bootJar {
    dependsOn asciidoctor // jar 빌드 전에 asciidoctor(문서 생성) 실행
    copy {
        from("${asciidoctor.outputDir}")
        into 'src/main/resources/static/docs'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Spring AI Open AI
    implementation 'org.springframework.ai:spring-ai-starter-model-openai'

    // Spring Data Neo4j
    implementation 'org.springframework.boot:spring-boot-starter-data-neo4j'

    // Neo4j Vector DB
    implementation 'org.springframework.ai:spring-ai-starter-vector-store-neo4j'

    // Neo4j Chat Memory
    implementation 'org.springframework.ai:spring-ai-starter-model-chat-memory-repository-neo4j'

    // Spring AOP
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // Spring Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation "org.testcontainers:junit-jupiter:1.21.1"
    testImplementation "org.testcontainers:neo4j:1.21.1"

    // Bean Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Reactor Test
    testImplementation 'io.projectreactor:reactor-test:3.6.5'

    // Rest Docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor:3.0.3'
    testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient:3.0.3'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly('io.jsonwebtoken:jjwt-jackson:0.11.5')

    // oauthAdd commentMore actions
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // ahocorasick
    implementation 'org.ahocorasick:ahocorasick:0.6.3'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.11"
}

def jacocoExcludePatterns = [
        'com/ixi_U/IxiUApplication.class',
        '**/common/**',
        '**/exception/**',
        '**/dto/**',
        '**/config/**',
        '**/test/**'
]

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: jacocoExcludePatterns)
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {

        rule {
            enabled = true
            element = 'CLASS'

            // 커버리지 제외 범위
            excludes = jacocoExcludePatterns
        }
    }
}

clean {
    delete file('src/main/generated')
}
